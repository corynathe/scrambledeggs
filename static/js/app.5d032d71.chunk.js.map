{"version":3,"sources":["constants.ts","styles.ts","Icons.tsx","OptionsModal.tsx","InfoModal.tsx","GameOverModal.tsx","App.tsx"],"names":["DIFFICULTY_LEVEL","rowCount","colCount","size","name","icons","COLORS","ICON_GROUP","egg","title","iconContainer","type","sizeFactor","icon","info","penguin","book","baby","cow","ball","STYLES","StyleSheet","create","container","height","backgroundColor","withOpacity","opacity","north","alignItems","justifyContent","south","fontSize","fontFamily","color","paddingTop","infoIcon","paddingRight","infoLine","infoGuess","fontWeight","gameIcon","optionsDisplay","optionsTitle","row","flexDirection","spaced","marginTop","marginBottom","cell","padding","cellBorder","margin","border","borderRadius","levelSelected","levelUnselected","button","elevation","buttonText","textTransform","centeredView","flex","modalView","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","ClickIcon","props","onClick","_onClick","useCallback","index","TouchableOpacity","onPress","NonClickIcon","FAIcon","FontAwesome","FA5Icon","FontAwesome5","MCIcon","MaterialCommunityIcons","LevelIcons","memo","map","i","OptionsModal","settings","toggleOptionsModal","resetGame","Modal","animationType","transparent","visible","onRequestClose","View","style","Text","Object","keys","gameName","gameInfo","game","iconColor","df","selected","level","InfoModal","toggleInfoModal","line","infoCorrect","GameOverModal","guessCounter","toggleGameOverModal","App","useState","colors","getRandomColors","totalCount","setSettings","diffLevel","useMemo","rows","Array","cols","fill","show","setShow","hasShow","setHasShow","correct","setCorrect","setGuessCounter","showOptionsModal","setShowOptionsModal","showInfoModal","setShowInfoModal","showGameOverModal","setShowGameOverModal","showingModal","showNone","force","useEffect","setTimeout","clickContainer","newShow","containers","newGame","newSettings","newLevel","newTotalCount","_newSettings","undefined","r","c","length","findIndex","s","n","sort","Math","random","slice","matches","colorMatches","first","second","filter","x"],"mappings":"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","file":"static/js/app.5d032d71.chunk.js","sourcesContent":["\nexport const DIFFICULTY_LEVEL = [\n    {rowCount: 2, colCount: 3, size: 90, name: 'Easy', icons: ['star', 'star-o', 'star-o']},\n    {rowCount: 4, colCount: 3, size: 60, name: 'Medium', icons: ['star', 'star', 'star-o']},\n    {rowCount: 5, colCount: 4, size: 45, name: 'Hard', icons: ['star', 'star', 'star']},\n];\n\nexport const COLORS = [\n    'darkblue', '#92f7a8', 'magenta', '#28b59e', 'purple', 'orange', 'lightblue', 'black', 'red',\n    'maroon', 'darkgreen', 'pink', 'tan', 'grey', '#f56c42', '#42ecf5', '#14c93b', '#c996f2',\n    '#4970c4', '#785625'\n];\n\nexport const ICON_GROUP = {\n    egg: {\n        title: 'Scrambled Eggs',\n        iconContainer: {\n            type: 'FontAwesome',\n            name: 'shopping-basket',\n            sizeFactor: 1,\n        },\n        icon: {\n            type: 'MaterialCommunityIcons',\n            name: 'egg-easter',\n        },\n        info: [\n            'The farmer\\'s eggs have all been scrambled!',\n            'Tap on the baskets to find the egg which is still in the correct place.'\n        ],\n    },\n    penguin: {\n        title: 'Penguin Town',\n        iconContainer: {\n            type: 'FontAwesome5',\n            name: 'igloo',\n            sizeFactor: 1,\n        },\n        icon: {\n            type: 'MaterialCommunityIcons',\n            name: 'penguin',\n        },\n        info: [\n            'The penguins are on the move!',\n            'Tap on the igloo to find the penguin that is still at home.'\n        ],\n    },\n    book: {\n        title: 'Dewey\\'s Decimals',\n        iconContainer: {\n            type: 'MaterialCommunityIcons',\n            name: 'bookshelf',\n            sizeFactor: 1.25,\n        },\n        icon: {\n            type: 'FontAwesome',\n            name: 'book',\n        },\n        info: [\n            'The librarian is on vacation!',\n            'Tap on the book shelf to find the book that is in the right place.'\n        ],\n    },\n    baby: {\n        title: 'Diaper Change',\n        iconContainer: {\n            type: 'MaterialCommunityIcons',\n            name: 'baby-carriage',\n            sizeFactor: 1.25,\n        },\n        icon: {\n            type: 'FontAwesome5',\n            name: 'baby',\n        },\n        info: [\n            'The babies are going for a walk!',\n            'Tap on the stroller to find the baby that is ready to go.'\n        ],\n    },\n    cow: {\n        title: 'Moo Moo Mixup',\n        iconContainer: {\n            type: 'MaterialCommunityIcons',\n            name: 'barn',\n            sizeFactor: 1.25,\n        },\n        icon: {\n            type: 'MaterialCommunityIcons',\n            name: 'cow',\n        },\n        info: [\n            'The cows have escaped!',\n            'Tap on the barn to see which cow hasn\\'t left yet.'\n        ],\n    },\n    ball: {\n        title: 'Hoop-tastic',\n        iconContainer: {\n            type: 'MaterialCommunityIcons',\n            name: 'basketball-hoop-outline',\n            sizeFactor: 1.25,\n        },\n        icon: {\n            type: 'MaterialCommunityIcons',\n            name: 'basketball',\n        },\n        info: [\n            'The big game is down to the final seconds!',\n            'Tap on the hoop to see which ball is going to score the winning basket.'\n        ],\n    },\n};\n\nexport const TIMEOUT = 1500;","import { StyleSheet } from 'react-native';\n\nexport const STYLES = StyleSheet.create({\n    container: {\n        height: '100%',\n        backgroundColor: '#fff',\n    },\n    withOpacity: {\n        opacity: 0.1,\n    },\n    north: {\n        height: '20%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#000',\n        // borderBottomWidth: 1,\n    },\n    south: {\n        height: '80%',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n\n    title: {\n        fontSize: 40,\n        fontFamily: 'Papyrus',\n        color: '#fff',\n        paddingTop: 40,\n    },\n    infoIcon: {\n        paddingRight: 100,\n    },\n    infoLine: {\n        fontSize: 20,\n        fontFamily: 'Papyrus',\n        color: '#333',\n    },\n    infoGuess: {\n        fontSize: 30,\n        fontFamily: 'Papyrus',\n        fontWeight: 'bold',\n    },\n    gameIcon: {\n        paddingRight: 15,\n    },\n    optionsDisplay: {\n        fontSize: 25,\n        fontFamily: 'Papyrus',\n    },\n    optionsTitle: {\n        fontSize: 35,\n        fontFamily: 'Papyrus',\n    },\n    row: {\n        flexDirection: 'row',\n    },\n    spaced: {\n      marginTop: 20,\n      marginBottom: 20,\n    },\n\n    cell: {\n        padding: 10,\n        alignItems: 'center'\n    },\n    cellBorder: {\n        padding: 10,\n        margin: 10,\n        alignItems: 'center',\n        border: 'solid 1px #555',\n        borderRadius: 10,\n    },\n\n    levelSelected: {\n        fontSize: 25,\n        fontFamily: 'Papyrus',\n        // fontWeight: 'bold',\n    },\n    levelUnselected: {\n        color: '#bbb',\n        fontSize: 25,\n        fontFamily: 'Papyrus',\n    },\n\n    button: {\n        backgroundColor: '#92f7a8',\n        borderRadius: 10,\n        padding: 10,\n        elevation: 2,\n    },\n    buttonText: {\n        fontFamily: 'Papyrus',\n        color: '#000',\n        fontWeight: 'bold',\n        textTransform: 'uppercase',\n    },\n\n    centeredView: {\n        flex: 1,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginTop: 25,\n    },\n    modalView: {\n        margin: 20,\n        backgroundColor: '#fff',\n        borderRadius: 20,\n        padding: 35,\n        alignItems: 'center',\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5,\n    },\n});","import React, { FC, memo, useCallback } from \"react\";\nimport { TouchableOpacity } from \"react-native\";\nimport { FontAwesome, FontAwesome5, MaterialCommunityIcons } from \"@expo/vector-icons\";\n\ninterface IconProps {\n    index?: number;\n    name: string;\n    color: string;\n    size: number;\n    style?: any;\n    type?: string;\n    onClick?: (index: number) => void;\n}\n\nexport const ClickIcon: FC<IconProps> = (props) => {\n    const { onClick } = props;\n\n    const _onClick = useCallback(() => {\n        onClick?.(props.index);\n    }, [props]);\n\n    return (\n        <TouchableOpacity onPress={_onClick}>\n            {props.type === 'FontAwesome' && <FAIcon {...props} />}\n            {props.type === 'FontAwesome5' && <FA5Icon {...props} />}\n            {props.type === 'MaterialCommunityIcons' && <MCIcon {...props} />}\n        </TouchableOpacity>\n    )\n}\n\nexport const NonClickIcon: FC<IconProps> = (props) => {\n    return (\n        <>\n            {props.type === 'FontAwesome' && <FAIcon {...props} />}\n            {props.type === 'FontAwesome5' && <FA5Icon {...props} />}\n            {props.type === 'MaterialCommunityIcons' && <MCIcon {...props} />}\n        </>\n    )\n}\n\nexport const FAIcon: FC<IconProps> = (props) => {\n    return (\n        <FontAwesome {...props}  />\n    )\n}\n\nexport const FA5Icon: FC<IconProps> = (props) => {\n    return (\n        <FontAwesome5 {...props}  />\n    )\n}\n\nexport const MCIcon: FC<IconProps> = (props) => {\n    return (\n        <MaterialCommunityIcons {...props} />\n    )\n}\n\ninterface LevelIconsProps {\n    icons: string[];\n    size: number;\n    color: string;\n}\n\nexport const LevelIcons: FC<LevelIconsProps> = memo(props => {\n    const { icons, size, color } = props;\n    return (\n        <>\n            {icons.map((icon, i) => {\n                return <FAIcon key={i} name={icon} color={color} size={size} />;\n            })}\n        </>\n    )\n});","import React, { FC } from 'react';\nimport { Text, TouchableOpacity, View, Modal } from 'react-native';\n\nimport { DIFFICULTY_LEVEL, ICON_GROUP } from './constants';\nimport { STYLES } from './styles';\nimport { GameSettings } from \"./models\";\nimport { LevelIcons, NonClickIcon } from \"./Icons\";\n\ninterface Props {\n    settings: GameSettings;\n    toggleOptionsModal: () => void;\n    resetGame: (settings: Partial<GameSettings>) => void;\n}\n\nexport const OptionsModal: FC<Props> = (props) => {\n    const { settings, toggleOptionsModal, resetGame } = props;\n\n    return (\n        <Modal\n            animationType=\"slide\"\n            transparent\n            visible={true}\n            onRequestClose={toggleOptionsModal}\n        >\n            <View style={STYLES.centeredView}>\n                <View style={STYLES.modalView}>\n                    <Text style={STYLES.optionsTitle}>Game Settings</Text>\n                    <View style={STYLES.spaced}>\n                        {Object.keys(ICON_GROUP).map(gameName => {\n                            const gameInfo = ICON_GROUP[gameName];\n                            const style = gameName === settings.game ? STYLES.levelSelected : STYLES.levelUnselected;\n                            const iconColor = gameName === settings.game ? '#000' : '#aaa';\n                            return (\n                                <TouchableOpacity key={gameName} onPress={() => {resetGame({game: gameName})}}>\n                                    <View style={STYLES.row}>\n                                        <NonClickIcon type={gameInfo.icon.type} name={gameInfo.icon.name} color={iconColor} size={30} />\n                                        <Text style={style}>&nbsp;&nbsp;{gameInfo.title}</Text>\n                                    </View>\n                                </TouchableOpacity>\n                            )\n                        })}\n                    </View>\n                    <View style={STYLES.spaced}>\n                        {DIFFICULTY_LEVEL.map((df, i) => {\n                            const selected = settings.level === i;\n                            const style = selected ? STYLES.levelSelected : STYLES.levelUnselected;\n                            return(\n                                <TouchableOpacity key={df.name} onPress={() => {resetGame({level: i})}}>\n                                    <View style={STYLES.row}>\n                                        <Text style={style}>{df.name}&nbsp;&nbsp;</Text>\n                                        <LevelIcons icons={df.icons} color={selected ? '#000' : '#aaa'} size={30} />\n                                    </View>\n                                </TouchableOpacity>\n                            );\n                        })}\n                    </View>\n                    <TouchableOpacity style={STYLES.button} onPress={toggleOptionsModal}>\n                        <Text style={STYLES.buttonText}>DONE</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </Modal>\n    );\n}\n","import React, { FC } from 'react';\nimport { Text, TouchableOpacity, View, Modal } from 'react-native';\n\nimport { STYLES } from './styles';\nimport { NonClickIcon } from \"./Icons\";\nimport { COLORS, DIFFICULTY_LEVEL } from \"./constants\";\n\ninterface Props {\n    gameInfo: Record<string, any>;\n    toggleInfoModal: () => void;\n}\n\nexport const InfoModal: FC<Props> = (props) => {\n    const { toggleInfoModal, gameInfo } = props;\n    const size = DIFFICULTY_LEVEL[1].size;\n\n    return (\n        <Modal\n            animationType=\"slide\"\n            transparent\n            visible={true}\n            onRequestClose={toggleInfoModal}\n        >\n            <View style={STYLES.centeredView}>\n                <View style={STYLES.modalView}>\n                    <Text style={STYLES.optionsTitle}>How To Play</Text>\n                    <View style={STYLES.spaced}>\n                        {gameInfo.info.map((line, i) => {\n                            return <Text style={STYLES.infoLine} key={i}>{line}</Text>\n                        })}\n                    </View>\n                    <View style={STYLES.spaced}>\n                        <View style={STYLES.row}>\n                            <View style={STYLES.cell}>\n                                <View style={STYLES.cellBorder}>\n                                    <NonClickIcon type={gameInfo.icon.type} name={gameInfo.icon.name} color={COLORS[0]} size={size} />\n                                    <NonClickIcon index={0} type={gameInfo.iconContainer.type} name={gameInfo.iconContainer.name} color={COLORS[0]} size={size * gameInfo.iconContainer.sizeFactor} />\n                                </View>\n                                <NonClickIcon style={STYLES.infoCorrect} index={0} type={'FontAwesome'} name={'check-circle'} color={'green'} size={40} />\n                            </View>\n                            <View style={STYLES.cell}>\n                                <View style={STYLES.cellBorder}>\n                                    <NonClickIcon type={gameInfo.icon.type} name={gameInfo.icon.name} color={COLORS[5]} size={size} />\n                                    <NonClickIcon index={0} type={gameInfo.iconContainer.type} name={gameInfo.iconContainer.name} color={COLORS[2]} size={size * gameInfo.iconContainer.sizeFactor} />\n                                </View>\n                                <NonClickIcon style={STYLES.infoCorrect} index={0} type={'FontAwesome'} name={'times-circle'} color={'red'} size={40} />\n                            </View>\n                        </View>\n                    </View>\n                    <TouchableOpacity style={STYLES.button} onPress={toggleInfoModal}>\n                        <Text style={STYLES.buttonText}>DONE</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </Modal>\n    );\n}\n","import React, { FC } from 'react';\nimport { Text, TouchableOpacity, View, Modal } from 'react-native';\n\nimport { STYLES } from './styles';\nimport { NonClickIcon } from \"./Icons\";\nimport { DIFFICULTY_LEVEL } from \"./constants\";\n\ninterface Props {\n    color: string;\n    gameInfo: Record<string, any>;\n    guessCounter: number;\n    toggleGameOverModal: () => void;\n}\n\nexport const GameOverModal: FC<Props> = (props) => {\n    const { color, gameInfo, guessCounter, toggleGameOverModal } = props;\n\n    return (\n        <Modal\n            animationType=\"slide\"\n            transparent\n            visible={true}\n            onRequestClose={toggleGameOverModal}\n        >\n            <View style={STYLES.centeredView}>\n                <View style={STYLES.modalView}>\n                    <Text style={STYLES.optionsTitle}>Great Work!</Text>\n                    <View style={STYLES.spaced}>\n                        <View style={STYLES.cell}>\n                            <NonClickIcon index={0} type={gameInfo.icon.type} name={gameInfo.icon.name} color={color} size={DIFFICULTY_LEVEL[1].size * gameInfo.iconContainer.sizeFactor} />\n                        </View>\n                        <Text style={STYLES.infoLine}>You guessed it in <Text style={STYLES.infoGuess}>{guessCounter}</Text> {guessCounter == 1 ? 'try' : 'tries'}.</Text>\n                    </View>\n                    <TouchableOpacity style={STYLES.button} onPress={toggleGameOverModal}>\n                        <Text style={STYLES.buttonText}>Play Again</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </Modal>\n    );\n}\n","import React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\n\nimport { DIFFICULTY_LEVEL, ICON_GROUP, COLORS, TIMEOUT } from './constants';\nimport { STYLES } from './styles';\nimport { GameSettings, GameColors } from \"./models\";\nimport { ClickIcon, LevelIcons, NonClickIcon } from \"./Icons\";\nimport { OptionsModal } from \"./OptionsModal\";\nimport { InfoModal } from \"./InfoModal\";\nimport { GameOverModal } from \"./GameOverModal\";\n\nexport default function App() {\n  const [settings, setSettings] = useState<GameSettings>({\n    game: 'egg',\n    level: 1,\n    colors: getRandomColors(COLORS, 12),\n    totalCount: 12,\n  });\n  const diffLevel = useMemo(() => DIFFICULTY_LEVEL[settings.level], [settings]);\n  const gameInfo = useMemo(() => ICON_GROUP[settings.game], [settings]);\n  const rows = useMemo(() => [...Array(diffLevel.rowCount).keys()], [diffLevel]);\n  const cols = useMemo(() => [...Array(diffLevel.colCount).keys()], [diffLevel]);\n  const [show, setShow] = useState<boolean[]>(Array(settings.totalCount).fill(false));\n  const [hasShow, setHasShow] = useState<boolean>(false);\n  const [correct, setCorrect] = useState<boolean>(false);\n  const [guessCounter, setGuessCounter] = useState<number>(0);\n  const [showOptionsModal, setShowOptionsModal] = useState<boolean>(false);\n  const [showInfoModal, setShowInfoModal] = useState<boolean>(false);\n  const [showGameOverModal, setShowGameOverModal] = useState<boolean>(false);\n  const showingModal = useMemo(() => showOptionsModal || showInfoModal || showGameOverModal, [showOptionsModal, showInfoModal, showGameOverModal]);\n\n  const showNone = useCallback((force?: boolean) => {\n    if (!correct || force) {\n      setHasShow(false);\n      setShow(Array(settings.totalCount).fill(false));\n    }\n  }, [correct, settings]);\n\n  const showAll = useCallback(() => {\n    setHasShow(false);\n    setShow(Array(settings.totalCount).fill(true));\n  }, [settings]);\n\n  useEffect(() => {\n    if (hasShow) {\n      setTimeout(() => showNone(), TIMEOUT);\n    }\n  }, [hasShow]);\n\n  const clickContainer = useCallback((index: number) => {\n    if (hasShow || typeof index !== 'number') return;\n\n    const newShow = [...show];\n    newShow[index] = true;\n    setShow(newShow);\n    setHasShow(true);\n    setGuessCounter(guessCounter + 1);\n\n    const isCorrect = settings.colors.icons[index] === settings.colors.containers[index];\n    if (isCorrect) {\n      setCorrect(true);\n      setTimeout(() => {\n        setShowGameOverModal(true);\n      }, 500);\n    }\n  }, [show, hasShow, settings, guessCounter]);\n\n  const newGame = useCallback(() => {\n    resetGame(settings);\n  }, [settings]);\n\n  const resetGame = useCallback((newSettings: Partial<GameSettings>) => {\n    const newLevel = newSettings.level ?? settings.level;\n    const newTotalCount = DIFFICULTY_LEVEL[newLevel].rowCount * DIFFICULTY_LEVEL[newLevel].colCount;\n    const _newSettings = {\n      ...settings,\n      ...newSettings,\n      colors: getRandomColors(COLORS, newTotalCount),\n    };\n    setSettings(_newSettings);\n    setCorrect(false);\n    showNone(true);\n    setGuessCounter(0);\n  }, [settings]);\n\n  const toggleOptionsModal = useCallback(() => {\n    setShowOptionsModal(!showOptionsModal);\n  }, [showOptionsModal]);\n\n  const toggleInfoModal = useCallback(() => {\n    setShowInfoModal(!showInfoModal);\n  }, [showInfoModal]);\n\n  const toggleGameOverModal = useCallback(() => {\n    newGame();\n    setShowGameOverModal(!showGameOverModal);\n  }, [showGameOverModal, newGame]);\n\n  return (\n      <View style={STYLES.container}>\n        <View style={[STYLES.north, showingModal ? STYLES.withOpacity : undefined]}>\n          <Text style={STYLES.title}>{gameInfo.title}</Text>\n          <View style={STYLES.row}>\n            <Text style={STYLES.optionsDisplay}>\n              <TouchableOpacity style={STYLES.infoIcon} onPress={toggleInfoModal}>\n                <NonClickIcon type=\"MaterialCommunityIcons\" name=\"information-outline\" color={'#fff'} size={30} />\n              </TouchableOpacity>\n              <TouchableOpacity onPress={toggleOptionsModal}>\n                <View style={STYLES.row}>\n                  <NonClickIcon style={STYLES.gameIcon} type={gameInfo.icon.type} name={gameInfo.icon.name} color={'#fff'} size={30} />\n                  <LevelIcons icons={DIFFICULTY_LEVEL[settings.level].icons} color={'#fff'} size={30} />\n                </View>\n              </TouchableOpacity>\n            </Text>\n          </View>\n        </View>\n        <View style={[STYLES.south, showingModal ? STYLES.withOpacity : undefined]}>\n          {rows.map(r => {\n            return (\n                <View key={r} style={STYLES.row}>\n                  {cols.map(c => {\n                    const index = (r * cols.length) + c;\n                    const iconColor = show[index] ? settings.colors.icons[index] : 'white';\n                    return (\n                        <View key={r+''+c} style={STYLES.cell}>\n                          <NonClickIcon index={index} type={gameInfo.icon.type} name={gameInfo.icon.name} color={iconColor} size={diffLevel.size} />\n                          {correct && <NonClickIcon index={index} type={gameInfo.iconContainer.type} name={gameInfo.iconContainer.name} color={settings.colors.containers[index]} size={diffLevel.size * gameInfo.iconContainer.sizeFactor} />}\n                          {!correct && <ClickIcon index={index} onClick={clickContainer} type={gameInfo.iconContainer.type} name={gameInfo.iconContainer.name} color={settings.colors.containers[index]} size={diffLevel.size * gameInfo.iconContainer.sizeFactor} />}\n                        </View>\n                    )\n                  })}\n                </View>\n            )\n          })}\n        </View>\n        {showOptionsModal && (\n            <OptionsModal\n                settings={settings}\n                toggleOptionsModal={toggleOptionsModal}\n                resetGame={resetGame}\n            />\n        )}\n        {showInfoModal && (\n            <InfoModal\n                gameInfo={gameInfo}\n                toggleInfoModal={toggleInfoModal}\n            />\n        )}\n        {showGameOverModal && (\n            <GameOverModal\n                color={settings.colors.containers[show.findIndex(s => s)]}\n                gameInfo={gameInfo}\n                guessCounter={guessCounter}\n                toggleGameOverModal={toggleGameOverModal}\n            />\n        )}\n      </View>\n  );\n}\n\nconst getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * max);\n}\n\nconst getRandomColors = (colors: string[], n: number): GameColors => {\n  const icons = [...colors].sort(() => 0.5 - Math.random()).slice(0, n);\n  let containers = [...icons].sort(() => 0.5 - Math.random());\n  let matches = colorMatches(icons, containers);\n  while (matches !== 1) {\n    containers = [...icons].sort(() => 0.5 - Math.random());\n    matches = colorMatches(icons, containers);\n  }\n  return { icons, containers };\n}\n\nconst colorMatches = (first: string[], second: string[]): number => {\n  return first.filter((x, i) => x === second[i]).length;\n}\n"],"sourceRoot":""}